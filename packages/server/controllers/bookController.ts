import { Request, Response, RequestHandler } from "express";
import { db } from "../config/db.js";
import { books } from "../models/bookModel.js";
import { authors } from "../models/authorModel.js";
import { eq } from "drizzle-orm";

// ‚úÖ R√©cup√©rer tous les livres
export const getAllBooks = async (req: Request, res: Response) => {
    try {
        const allBooks = await db.select().from(books);
        res.status(200).json(allBooks);
    } catch (error) {
        console.error("üö® ERREUR SQL :", error);
        res.status(500).json({ error: "Erreur lors de la r√©cup√©ration des livres." });
    }
};

// ‚úÖ Ajout d'un livre avec authorId (‚ö†Ô∏è Ancienne m√©thode, pas utilis√©e si on g√®re `authorName`)
export const addBook: RequestHandler = async (req, res) => {
    try {
        const { title, description, authorId } = req.body;

        if (!title || !authorId) {
            res.status(400).json({ error: "Le titre et l'ID de l'auteur sont requis." });
            return;
        }

        const newBook = await db.insert(books).values({
            title,
            description: description || "",
            content: "Contenu par d√©faut",
            authorId,
        }).returning();

        res.status(201).json({ message: "Livre ajout√© avec succ√®s !", book: newBook[0] });
    } catch (error) {
        console.error("üö® ERREUR SQL :", error);
        res.status(500).json({ error: "Erreur lors de l'ajout du livre." });
    }
};

// ‚úÖ Cr√©ation d'un livre avec `authorName`
export const createBook = async (req: Request, res: Response): Promise<void> => {
    try {
        const { title, authorName, content, image, price, description } = req.body;

        if (!title || !authorName) {
            res.status(400).json({ error: "Le titre et le nom de l'auteur sont requis." });
            return;
        }

        console.log(`üìñ Cr√©ation du livre: ${title} par ${authorName}`);

        // üîç V√©rifier si l'auteur existe d√©j√†
        let author = await db.select().from(authors).where(eq(authors.name, authorName)).limit(1);

        // ‚úç Si l'auteur n'existe pas, on l'ajoute
        if (author.length === 0) {
            console.log(`‚úç Ajout de l'auteur: ${authorName}`);
            const insertedAuthors = await db.insert(authors).values({ name: authorName }).returning();
            author = insertedAuthors;
        }

        if (!author[0] || !author[0].id) {
            res.status(500).json({ error: "Erreur lors de la r√©cup√©ration de l'auteur." });
            return;
        }

        console.log(`‚úÖ Auteur ID r√©cup√©r√©: ${author[0].id}`);

        // üìö Ajouter le livre avec l'ID de l'auteur r√©cup√©r√©
        const newBook = await db.insert(books).values({
            title,
            authorId: author[0].id,
            content: content || "Contenu par d√©faut",
            image,
            price: price || "0",
            description: description || "",
        }).returning();

        console.log("‚úÖ Livre ajout√©:", newBook);
        res.status(201).json({ message: "Livre ajout√© avec succ√®s", book: newBook[0] });

    } catch (error) {
        console.error("‚ùå Erreur lors de la cr√©ation du livre :", error);
        res.status(500).json({ error: "Erreur interne du serveur." });
    }
};
